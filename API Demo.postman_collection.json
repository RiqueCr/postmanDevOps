{
	"info": {
		"_postman_id": "3f602708-0fc5-417f-ad1f-9faca13e07ba",
		"name": "API Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26677470"
	},
	"item": [
		{
			"name": "Negative Path",
			"item": [
				{
					"name": "Sin Autenticación en Header",
					"item": [
						{
							"name": "API POST Crear una nueva orden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"customerName\": \"{{$randomFullName}}\",\r\n    \"comment\": \"Orden nueva de Armando Mocha\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "API GET Todas las ordenes creadas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJS = pm.response.json();",
									"pm.test(\"Mensaje de Error\", function(){",
									"    pm.expect(responseJS.error).to.eql(\"Missing Authorization header.\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Token Autenticación Invalido",
					"item": [
						{
							"name": "API POST Crear una nueva orden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"customerName\": \"{{$randomFullName}}\",\r\n    \"comment\": \"Orden nueva de Armando Mocha\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "API GET Todas las ordenes creadas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJS = pm.response.json();",
									"pm.test(\"Mensaje de Error\", function(){",
									"    pm.expect(responseJS.error).to.eql(\"Invalid bearer token.\");",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Inputs Invalidos",
			"item": [
				{
					"name": "API Todos los Productos Categoria Invalida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJS = pm.response.json();\r",
									"pm.test(\"Mensaje Error Categoria Invalida\", function(){\r",
									"    // De estas 2 formas es valido esto\r",
									"    pm.expect(responseJS.error).to.have.string(\"Invalid value for query parameter 'category'.\");\r",
									"    pm.expect(responseJS.error).to.contains(\"Invalid value for query parameter 'category'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?category=invalid category",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid category"
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "available",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "API Todos los Productos Cantidad Invalida -> Maximo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJS = pm.response.json();\r",
									"pm.test(\"Mensaje Error Categoria Invalida\", function(){\r",
									"    // De estas 2 formas es valido esto\r",
									"    pm.expect(responseJS.error).to.have.string(\"Invalid value for query parameter 'results'.\");\r",
									"    pm.expect(responseJS.error).to.contains(\"Invalid value for query parameter 'results'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?results=21",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "available",
									"value": "",
									"disabled": true
								},
								{
									"key": "results",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "API Todos los Productos Cantidad Invalida -> Minima",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJS = pm.response.json();\r",
									"pm.test(\"Mensaje Error Categoria Invalida\", function(){\r",
									"    // De estas 2 formas es valido esto\r",
									"    pm.expect(responseJS.error).to.have.string(\"Invalid value for query parameter 'results'.\");\r",
									"    pm.expect(responseJS.error).to.contains(\"Invalid value for query parameter 'results'.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?results=-1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "available",
									"value": "",
									"disabled": true
								},
								{
									"key": "results",
									"value": "-1"
								}
							]
						},
						"description": "Esta petición prueba tal cosa: la cosa\n\nLos test que se ejecutan son para:\n\n1. Prueba 1: fesfnmskfas\n2. Prueba 2: fosnfiodsnf\n3. Prueba 3: fsnbdfons\n    \n\nPeo"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "YOUR ACCESS TOKEN",
			"type": "string"
		},
		{
			"key": "accessToken2",
			"value": "YOUR ACCESS TOKEN",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": "",
			"type": "string"
		},
		{
			"key": "cartId2",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidToken",
			"value": "YOUR INVALID TOKEN",
			"type": "string"
		}
	]
}